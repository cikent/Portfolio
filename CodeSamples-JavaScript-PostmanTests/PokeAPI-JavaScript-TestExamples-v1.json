/********************
Setup & Preconditions:
- GET Request Value: https://pokeapi.co/api/v2/pokemon/charmander/
********************/

/********************
Declare Variables
********************/
const responseJson = pm.response.json(); //Declare variable for Response JSON
const responseText = pm.response.text(); //Declare variable for Response Text

//Declare Logs
console.log("Entire Response Body Log:", responseJson); //Log containing the entire JSON Response
console.log("Scope Log - Level 1:", responseJson); //Log containing the entire JSON Response at the Root Level
console.log("Scope Log - Level 2:", responseJson.abilities); //Log containing a specific JSON Response property
console.log("Scope Log - Level 3:", responseJson.abilities[
    1
]); //Log containing a specific JSON Response property
console.log("Scope Log - Level 4:", responseJson.abilities[
    1
].ability); //Log containing a specific JSON Response property
console.log("Scope Log - Level 5:", responseJson.abilities[
    1
].ability.name); //Log containing a specific JSON Response property

//Declare Test Variables
const abilityName = "solar-power";

/********************
PokeAPI Pokemon GET Test's:
********************/
// Verify the Response Status Code returned is 200
pm.test("Status code is 200", function() {
    pm.expect(pm.response.to.have.status(200));
});

// Verify the Response is a valid JSON Object
pm.test("Response is a valid JSON Object", function() {
    pm.expect(responseJson).to.be.an('object');
});

// Verify the Response does HAVE the specific property 'abilities'
pm.test("Response does HAVE the specific property 'abilities'", function() {
    pm.expect(responseJson).to.have.property('abilities');
});

// Verify the Response value is a specific data type
pm.test("Response value is a specific data type: String", function() {
    pm.expect(responseJson.abilities[
        1
    ].ability.name).to.be.a('string');
});

// Verify the Response does NOT HAVE the specific property 'data'
pm.test("Response does NOT HAVE the specific property 'data'", function() {
    pm.expect(responseJson).to.not.have.property('data');
});

// Verify the Response value is a Equal To a Variable Test value
pm.test("The ability returned from the Array is 'solar-power'", function() {
    pm.expect(responseJson.abilities[
        1
    ].ability.name).to.eql(abilityName);
});

// Verify the Response Header contains the presence of certain criteria
pm.test("Content-Type header is application/json", function () {
    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');
    pm.expect(pm.response.headers.get('Server')).to.include('cloudflare');
});